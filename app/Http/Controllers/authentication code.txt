//OLD Register function

Registration and Login functions    
public function registerUser(Request $request){
$password=$request->password; 
$confirm_password=$request->confirmPassword;

$request->validate([
    'full_name'=>'required|min:3',
    'email'=>'required|min:4|email|unique:users',
    'phone'=>'min:10|max:10|unique:users', 
    'password' => [
        'required',
        'string',
        'min:8', // Minimum length of 8 characters
        'max:17',
        'regex:/[A-Z]/', // Requires at least one uppercase letter
        'regex:/[a-z]/', // Requires at least one lowercase letter
        'regex:/[0-9]/', // Requires at least one digit
        'regex:/[@$!%*#?&]/', // Requires at least one special character
    ],
    'confirm_password'=>'required|same:password', 

]);

$user= new User;
$user->full_name=$request->full_name;
$user->email=$request->email;
$user->phone=$request->phone;
$user->password=Hash::make($request->password);
$res=$user->save();

if($res==true) {
return redirect('login')->with('success','You have been registered successfully');
}
else{
    return back()->with('Error','Something went wrong try again');
}

}

//OLD Login function


public function loginUser(Request $request){

$request->validate([
    'email'=>'required|min:4|email',
    'password' => [
        'required',
        'string',
        'min:8', // Minimum length of 8 characters
        'max:17',
        'regex:/[A-Z]/', // Requires at least one uppercase letter
        'regex:/[a-z]/', // Requires at least one lowercase letter
        'regex:/[0-9]/', // Requires at least one digit
        'regex:/[@$!%*#?&]/', // Requires at least one special character
        
    ],

 
]);

$user=User::where('email','=',$request->email)->first();
$enabled2FA=User::where('twoFA_enabled','=',1)->first();
$disabled2FA=User::where('twoFA_enabled','=',0)->first();
$verified2FA=User::where('twoFA_enabled','=',1)->first();
$disabled2FA=User::where('twoFA_enabled','=',0)->first();
$twoFAcode=234;

if($user)
{
if(Hash::check($request->password,$user->password)){
        
        
        $request->session()->put('loginId',$user->id);
        if($enabled2FA){
        $fourDigitCode = RandomCodeGenerator::generateRandomCode(4); 
        $user->twoFA_code=Hash::make($fourDigitCode);
        $user->save();
        Mail::to($user->email)->send(new TwoFA_Login($fourDigitCode));
        return redirect('twofaview');
        }
        else{
        
        return redirect('dashboard');
        }
   

    }
    else
    {
        return back()->with('Error','This email is not registered or the password is wrong');
    }

}
else{
    return back()->with('Error','This email is not registered or the password is wrong');
}

}




//OLD logout


// public function logout(){
// $verified2FA=User::where('twoFA_verified','=',1)->first();
// $disabled2FA=User::where('twoFA_enabled','=',0)->first();

// $data=User::where('id','=',Session::get('loginId'))->first();
// if(Session::has('loginId')){
//         if($verified2FA){
//             $data->twoFA_code= 0;
//             $data->twoFA_verified=0;
//             $data->save();
//             Session::pull('loginId');
//             return redirect('login');
            
//         }
//         else{
//             Session::pull('loginId');
//             return redirect('login');  
//         }
       
//     }  
// }